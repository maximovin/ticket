/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fabit.ticket.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TicketAVRO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1619693096934876458L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TicketAVRO\",\"namespace\":\"fabit.ticket.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"visitorName\",\"type\":\"string\"},{\"name\":\"visitorBirthday\",\"type\":[\"null\",\"string\"]},{\"name\":\"eventName\",\"type\":[\"null\",\"string\"]},{\"name\":\"eventDateTime\",\"type\":\"string\"},{\"name\":\"row\",\"type\":[\"null\",\"int\"]},{\"name\":\"seat\",\"type\":[\"null\",\"int\"]},{\"name\":\"price\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TicketAVRO> ENCODER =
      new BinaryMessageEncoder<TicketAVRO>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TicketAVRO> DECODER =
      new BinaryMessageDecoder<TicketAVRO>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TicketAVRO> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TicketAVRO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TicketAVRO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TicketAVRO>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TicketAVRO to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TicketAVRO from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TicketAVRO instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TicketAVRO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence visitorName;
  @Deprecated public java.lang.CharSequence visitorBirthday;
  @Deprecated public java.lang.CharSequence eventName;
  @Deprecated public java.lang.CharSequence eventDateTime;
  @Deprecated public java.lang.Integer row;
  @Deprecated public java.lang.Integer seat;
  @Deprecated public double price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TicketAVRO() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param visitorName The new value for visitorName
   * @param visitorBirthday The new value for visitorBirthday
   * @param eventName The new value for eventName
   * @param eventDateTime The new value for eventDateTime
   * @param row The new value for row
   * @param seat The new value for seat
   * @param price The new value for price
   */
  public TicketAVRO(java.lang.Long id, java.lang.CharSequence visitorName, java.lang.CharSequence visitorBirthday, java.lang.CharSequence eventName, java.lang.CharSequence eventDateTime, java.lang.Integer row, java.lang.Integer seat, java.lang.Double price) {
    this.id = id;
    this.visitorName = visitorName;
    this.visitorBirthday = visitorBirthday;
    this.eventName = eventName;
    this.eventDateTime = eventDateTime;
    this.row = row;
    this.seat = seat;
    this.price = price;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return visitorName;
    case 2: return visitorBirthday;
    case 3: return eventName;
    case 4: return eventDateTime;
    case 5: return row;
    case 6: return seat;
    case 7: return price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: visitorName = (java.lang.CharSequence)value$; break;
    case 2: visitorBirthday = (java.lang.CharSequence)value$; break;
    case 3: eventName = (java.lang.CharSequence)value$; break;
    case 4: eventDateTime = (java.lang.CharSequence)value$; break;
    case 5: row = (java.lang.Integer)value$; break;
    case 6: seat = (java.lang.Integer)value$; break;
    case 7: price = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'visitorName' field.
   * @return The value of the 'visitorName' field.
   */
  public java.lang.CharSequence getVisitorName() {
    return visitorName;
  }


  /**
   * Sets the value of the 'visitorName' field.
   * @param value the value to set.
   */
  public void setVisitorName(java.lang.CharSequence value) {
    this.visitorName = value;
  }

  /**
   * Gets the value of the 'visitorBirthday' field.
   * @return The value of the 'visitorBirthday' field.
   */
  public java.lang.CharSequence getVisitorBirthday() {
    return visitorBirthday;
  }


  /**
   * Sets the value of the 'visitorBirthday' field.
   * @param value the value to set.
   */
  public void setVisitorBirthday(java.lang.CharSequence value) {
    this.visitorBirthday = value;
  }

  /**
   * Gets the value of the 'eventName' field.
   * @return The value of the 'eventName' field.
   */
  public java.lang.CharSequence getEventName() {
    return eventName;
  }


  /**
   * Sets the value of the 'eventName' field.
   * @param value the value to set.
   */
  public void setEventName(java.lang.CharSequence value) {
    this.eventName = value;
  }

  /**
   * Gets the value of the 'eventDateTime' field.
   * @return The value of the 'eventDateTime' field.
   */
  public java.lang.CharSequence getEventDateTime() {
    return eventDateTime;
  }


  /**
   * Sets the value of the 'eventDateTime' field.
   * @param value the value to set.
   */
  public void setEventDateTime(java.lang.CharSequence value) {
    this.eventDateTime = value;
  }

  /**
   * Gets the value of the 'row' field.
   * @return The value of the 'row' field.
   */
  public java.lang.Integer getRow() {
    return row;
  }


  /**
   * Sets the value of the 'row' field.
   * @param value the value to set.
   */
  public void setRow(java.lang.Integer value) {
    this.row = value;
  }

  /**
   * Gets the value of the 'seat' field.
   * @return The value of the 'seat' field.
   */
  public java.lang.Integer getSeat() {
    return seat;
  }


  /**
   * Sets the value of the 'seat' field.
   * @param value the value to set.
   */
  public void setSeat(java.lang.Integer value) {
    this.seat = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Creates a new TicketAVRO RecordBuilder.
   * @return A new TicketAVRO RecordBuilder
   */
  public static fabit.ticket.model.TicketAVRO.Builder newBuilder() {
    return new fabit.ticket.model.TicketAVRO.Builder();
  }

  /**
   * Creates a new TicketAVRO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TicketAVRO RecordBuilder
   */
  public static fabit.ticket.model.TicketAVRO.Builder newBuilder(fabit.ticket.model.TicketAVRO.Builder other) {
    if (other == null) {
      return new fabit.ticket.model.TicketAVRO.Builder();
    } else {
      return new fabit.ticket.model.TicketAVRO.Builder(other);
    }
  }

  /**
   * Creates a new TicketAVRO RecordBuilder by copying an existing TicketAVRO instance.
   * @param other The existing instance to copy.
   * @return A new TicketAVRO RecordBuilder
   */
  public static fabit.ticket.model.TicketAVRO.Builder newBuilder(fabit.ticket.model.TicketAVRO other) {
    if (other == null) {
      return new fabit.ticket.model.TicketAVRO.Builder();
    } else {
      return new fabit.ticket.model.TicketAVRO.Builder(other);
    }
  }

  /**
   * RecordBuilder for TicketAVRO instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TicketAVRO>
    implements org.apache.avro.data.RecordBuilder<TicketAVRO> {

    private long id;
    private java.lang.CharSequence visitorName;
    private java.lang.CharSequence visitorBirthday;
    private java.lang.CharSequence eventName;
    private java.lang.CharSequence eventDateTime;
    private java.lang.Integer row;
    private java.lang.Integer seat;
    private double price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fabit.ticket.model.TicketAVRO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.visitorName)) {
        this.visitorName = data().deepCopy(fields()[1].schema(), other.visitorName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.visitorBirthday)) {
        this.visitorBirthday = data().deepCopy(fields()[2].schema(), other.visitorBirthday);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eventName)) {
        this.eventName = data().deepCopy(fields()[3].schema(), other.eventName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.eventDateTime)) {
        this.eventDateTime = data().deepCopy(fields()[4].schema(), other.eventDateTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.row)) {
        this.row = data().deepCopy(fields()[5].schema(), other.row);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.seat)) {
        this.seat = data().deepCopy(fields()[6].schema(), other.seat);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.price)) {
        this.price = data().deepCopy(fields()[7].schema(), other.price);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing TicketAVRO instance
     * @param other The existing instance to copy.
     */
    private Builder(fabit.ticket.model.TicketAVRO other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.visitorName)) {
        this.visitorName = data().deepCopy(fields()[1].schema(), other.visitorName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.visitorBirthday)) {
        this.visitorBirthday = data().deepCopy(fields()[2].schema(), other.visitorBirthday);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventName)) {
        this.eventName = data().deepCopy(fields()[3].schema(), other.eventName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventDateTime)) {
        this.eventDateTime = data().deepCopy(fields()[4].schema(), other.eventDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.row)) {
        this.row = data().deepCopy(fields()[5].schema(), other.row);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.seat)) {
        this.seat = data().deepCopy(fields()[6].schema(), other.seat);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.price)) {
        this.price = data().deepCopy(fields()[7].schema(), other.price);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'visitorName' field.
      * @return The value.
      */
    public java.lang.CharSequence getVisitorName() {
      return visitorName;
    }


    /**
      * Sets the value of the 'visitorName' field.
      * @param value The value of 'visitorName'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setVisitorName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.visitorName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'visitorName' field has been set.
      * @return True if the 'visitorName' field has been set, false otherwise.
      */
    public boolean hasVisitorName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'visitorName' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearVisitorName() {
      visitorName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'visitorBirthday' field.
      * @return The value.
      */
    public java.lang.CharSequence getVisitorBirthday() {
      return visitorBirthday;
    }


    /**
      * Sets the value of the 'visitorBirthday' field.
      * @param value The value of 'visitorBirthday'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setVisitorBirthday(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.visitorBirthday = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'visitorBirthday' field has been set.
      * @return True if the 'visitorBirthday' field has been set, false otherwise.
      */
    public boolean hasVisitorBirthday() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'visitorBirthday' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearVisitorBirthday() {
      visitorBirthday = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventName' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventName() {
      return eventName;
    }


    /**
      * Sets the value of the 'eventName' field.
      * @param value The value of 'eventName'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setEventName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.eventName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventName' field has been set.
      * @return True if the 'eventName' field has been set, false otherwise.
      */
    public boolean hasEventName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventName' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearEventName() {
      eventName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventDateTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventDateTime() {
      return eventDateTime;
    }


    /**
      * Sets the value of the 'eventDateTime' field.
      * @param value The value of 'eventDateTime'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setEventDateTime(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.eventDateTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'eventDateTime' field has been set.
      * @return True if the 'eventDateTime' field has been set, false otherwise.
      */
    public boolean hasEventDateTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'eventDateTime' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearEventDateTime() {
      eventDateTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'row' field.
      * @return The value.
      */
    public java.lang.Integer getRow() {
      return row;
    }


    /**
      * Sets the value of the 'row' field.
      * @param value The value of 'row'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setRow(java.lang.Integer value) {
      validate(fields()[5], value);
      this.row = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'row' field has been set.
      * @return True if the 'row' field has been set, false otherwise.
      */
    public boolean hasRow() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'row' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearRow() {
      row = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'seat' field.
      * @return The value.
      */
    public java.lang.Integer getSeat() {
      return seat;
    }


    /**
      * Sets the value of the 'seat' field.
      * @param value The value of 'seat'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setSeat(java.lang.Integer value) {
      validate(fields()[6], value);
      this.seat = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'seat' field has been set.
      * @return True if the 'seat' field has been set, false otherwise.
      */
    public boolean hasSeat() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'seat' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearSeat() {
      seat = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder setPrice(double value) {
      validate(fields()[7], value);
      this.price = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public fabit.ticket.model.TicketAVRO.Builder clearPrice() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TicketAVRO build() {
      try {
        TicketAVRO record = new TicketAVRO();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.visitorName = fieldSetFlags()[1] ? this.visitorName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.visitorBirthday = fieldSetFlags()[2] ? this.visitorBirthday : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.eventName = fieldSetFlags()[3] ? this.eventName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.eventDateTime = fieldSetFlags()[4] ? this.eventDateTime : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.row = fieldSetFlags()[5] ? this.row : (java.lang.Integer) defaultValue(fields()[5]);
        record.seat = fieldSetFlags()[6] ? this.seat : (java.lang.Integer) defaultValue(fields()[6]);
        record.price = fieldSetFlags()[7] ? this.price : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TicketAVRO>
    WRITER$ = (org.apache.avro.io.DatumWriter<TicketAVRO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TicketAVRO>
    READER$ = (org.apache.avro.io.DatumReader<TicketAVRO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.visitorName);

    if (this.visitorBirthday == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.visitorBirthday);
    }

    if (this.eventName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eventName);
    }

    out.writeString(this.eventDateTime);

    if (this.row == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.row);
    }

    if (this.seat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.seat);
    }

    out.writeDouble(this.price);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.visitorName = in.readString(this.visitorName instanceof Utf8 ? (Utf8)this.visitorName : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.visitorBirthday = null;
      } else {
        this.visitorBirthday = in.readString(this.visitorBirthday instanceof Utf8 ? (Utf8)this.visitorBirthday : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventName = null;
      } else {
        this.eventName = in.readString(this.eventName instanceof Utf8 ? (Utf8)this.eventName : null);
      }

      this.eventDateTime = in.readString(this.eventDateTime instanceof Utf8 ? (Utf8)this.eventDateTime : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.row = null;
      } else {
        this.row = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.seat = null;
      } else {
        this.seat = in.readInt();
      }

      this.price = in.readDouble();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.visitorName = in.readString(this.visitorName instanceof Utf8 ? (Utf8)this.visitorName : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.visitorBirthday = null;
          } else {
            this.visitorBirthday = in.readString(this.visitorBirthday instanceof Utf8 ? (Utf8)this.visitorBirthday : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventName = null;
          } else {
            this.eventName = in.readString(this.eventName instanceof Utf8 ? (Utf8)this.eventName : null);
          }
          break;

        case 4:
          this.eventDateTime = in.readString(this.eventDateTime instanceof Utf8 ? (Utf8)this.eventDateTime : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.row = null;
          } else {
            this.row = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.seat = null;
          } else {
            this.seat = in.readInt();
          }
          break;

        case 7:
          this.price = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










